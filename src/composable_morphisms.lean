import category_theory.category.basic
import tactic.omega
import tactic.linarith

open category_theory

namespace composable

universes u v
variables {C : Type u} [category.{v} C]

inductive composable : ‚Ñï ‚Üí C ‚Üí C ‚Üí Type (max u v)
| nil (X : C) : composable 0 X X
| cons (X Y Z : C) {n : ‚Ñï} (f : X ‚ü∂ Y) (gs : composable n Y Z) : composable (n+1) X Z

def to_hom : Œ† {n : ‚Ñï}, Œ† (X Y : C), composable n X Y ‚Üí (X ‚ü∂ Y)
| 0 _ _ (composable.nil X) := ùüô X
| (m+1) X Y (composable.cons _ Z _ f gs) := f ‚â´ (to_hom Z Y gs)


def obj : Œ† {n : ‚Ñï} {X Y : C}, composable n X Y ‚Üí fin (n+1) ‚Üí C
| _ _ _ (composable.nil X) ‚ü®0, _‚ü© := X
| _ _ _ (composable.nil X) ‚ü®m+1, _‚ü© := X
| _ _ _ (composable.cons X _ _ f gs) ‚ü®0, _‚ü© := X
| _ _ _ (composable.cons _ _ _ f gs) ‚ü®m+1, _‚ü© := obj gs m

@[simp] lemma obj_0 {n : ‚Ñï} {X Y : C} (fs : composable n X Y) : obj fs 0 = X := begin
  induction fs; tauto,
end

def drop : Œ† {n : ‚Ñï} {X Y : C} (m : ‚Ñï) (fs : composable n X Y), composable (n - m) (obj fs m) Y
| _ _ _ 0 fs := begin
  simp, refine fs,
end
| _ _ _ _ (composable.nil X) := begin
  simp, induction _x; simp, refine composable.nil X,
  
end

-- def slice : Œ† {n : ‚Ñï} {X Y : C}, Œ† (fs : composable n X Y), 
--     Œ† (start : fin n), Œ† (len : fin (n + 1 - start)), composable len (obj fs start) (obj fs (start + len))
-- | _ _ _ (composable.hom X Y f) ‚ü®a, Ha‚ü© ‚ü®b, Hb‚ü© := begin
--   simp, 
--   simp at Ha, subst Ha, simp at Hb,
--   dsimp [obj],
-- end


-- def drop : Œ† {n : ‚Ñï} {X Y : C}, Œ† (m : fin n), Œ† (fs : composable n X Y), composable (n - m) (obj fs m) Y
-- | _ _ _ ‚ü®0, _‚ü© fs := begin
--   simp, refine fs,
-- end
-- | _ _ _ ‚ü®m+1, H‚ü© (composable.hom X Y f) := begin
--   simp, dsimp [obj], exfalso, linarith,
-- end
-- | _ _ _ ‚ü®m+1, H‚ü© (composable.cons X Y Z f gs) := begin
--   simp,
--   refine drop ‚ü®m, _‚ü© gs, omega,
-- end


-- def take : Œ† {n : ‚Ñï} {X Y : C}, Œ† (m : fin n), Œ† (fs : composable n X Y), composable m X (obj fs m)


end composable